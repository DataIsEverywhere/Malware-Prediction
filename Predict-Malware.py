"""
Fraud Detection 
@author: Dominic
"""

#Import pandas and read data
import numpy as np
import pandas as pd
import matplotlib
import matplotlib.pyplot as plt
import seaborn as sns
sns.set()

pd.set_option('display.max_columns', 100)

#https://www.kaggle.com/theoviel/load-the-totality-of-the-data
dtypes = {
        'MachineIdentifier':                                    'category',
        'ProductName':                                          'category',
        'EngineVersion':                                        'category',
        'AppVersion':                                           'category',
        'AvSigVersion':                                         'category',
        'IsBeta':                                               'int8',
        'RtpStateBitfield':                                     'float16',
        'IsSxsPassiveMode':                                     'int8',
        'DefaultBrowsersIdentifier':                            'float32',
        'AVProductStatesIdentifier':                            'float32',
        'AVProductsInstalled':                                  'float16',
        'AVProductsEnabled':                                    'float16',
        'HasTpm':                                               'int8',
        'CountryIdentifier':                                    'int16',
        'CityIdentifier':                                       'float32',
        'OrganizationIdentifier':                               'float16',
        'GeoNameIdentifier':                                    'float16',
        'LocaleEnglishNameIdentifier':                          'int16',
        'Platform':                                             'category',
        'Processor':                                            'category',
        'OsVer':                                                'category',
        'OsBuild':                                              'int16',
        'OsSuite':                                              'int16',
        'OsPlatformSubRelease':                                 'category',
        'OsBuildLab':                                           'category',
        'SkuEdition':                                           'category',
        'IsProtected':                                          'float16',
        'AutoSampleOptIn':                                      'int8',
        'PuaMode':                                              'category',
        'SMode':                                                'float16',
        'IeVerIdentifier':                                      'float16',
        'SmartScreen':                                          'category',
        'Firewall':                                             'float16',
        'UacLuaenable':                                         'float64', # was 'float32'
        'Census_MDC2FormFactor':                                'category',
        'Census_DeviceFamily':                                  'category',
        'Census_OEMNameIdentifier':                             'float32', # was 'float16'
        'Census_OEMModelIdentifier':                            'float32',
        'Census_ProcessorCoreCount':                            'float16',
        'Census_ProcessorManufacturerIdentifier':               'float16',
        'Census_ProcessorModelIdentifier':                      'float32', # was 'float16'
        'Census_ProcessorClass':                                'category',
        'Census_PrimaryDiskTotalCapacity':                      'float64', # was 'float32'
        'Census_PrimaryDiskTypeName':                           'category',
        'Census_SystemVolumeTotalCapacity':                     'float64', # was 'float32'
        'Census_HasOpticalDiskDrive':                           'int8',
        'Census_TotalPhysicalRAM':                              'float32',
        'Census_ChassisTypeName':                               'category',
        'Census_InternalPrimaryDiagonalDisplaySizeInInches':    'float32', # was 'float16'
        'Census_InternalPrimaryDisplayResolutionHorizontal':    'float32', # was 'float16'
        'Census_InternalPrimaryDisplayResolutionVertical':      'float32', # was 'float16'
        'Census_PowerPlatformRoleName':                         'category',
        'Census_InternalBatteryType':                           'category',
        'Census_InternalBatteryNumberOfCharges':                'float64', # was 'float32'
        'Census_OSVersion':                                     'category',
        'Census_OSArchitecture':                                'category',
        'Census_OSBranch':                                      'category',
        'Census_OSBuildNumber':                                 'int16',
        'Census_OSBuildRevision':                               'int32',
        'Census_OSEdition':                                     'category',
        'Census_OSSkuName':                                     'category',
        'Census_OSInstallTypeName':                             'category',
        'Census_OSInstallLanguageIdentifier':                   'float16',
        'Census_OSUILocaleIdentifier':                          'int16',
        'Census_OSWUAutoUpdateOptionsName':                     'category',
        'Census_IsPortableOperatingSystem':                     'int8',
        'Census_GenuineStateName':                              'category',
        'Census_ActivationChannel':                             'category',
        'Census_IsFlightingInternal':                           'float16',
        'Census_IsFlightsDisabled':                             'float16',
        'Census_FlightRing':                                    'category',
        'Census_ThresholdOptIn':                                'float16',
        'Census_FirmwareManufacturerIdentifier':                'float16',
        'Census_FirmwareVersionIdentifier':                     'float32',
        'Census_IsSecureBootEnabled':                           'int8',
        'Census_IsWIMBootEnabled':                              'float16',
        'Census_IsVirtualDevice':                               'float16',
        'Census_IsTouchEnabled':                                'int8',
        'Census_IsPenCapable':                                  'int8',
        'Census_IsAlwaysOnAlwaysConnectedCapable':              'float16',
        'Wdft_IsGamer':                                         'float16',
        'Wdft_RegionIdentifier':                                'float16',
        'HasDetections':                                        'int8'
        }

#Read data (first 10% of kaggle training sample)
idf = pd.read_csv("100K.csv", dtype=dtypes)

#Explore basic data structure
print('Infected Data - rows:', idf.shape[0], 'columns:', 
      idf.shape[1])
print(idf.head(5))

#Check data structure
idf.info()

#Determine raw infected counts
infected_cnt = idf['HasDetections'].value_counts()
print('Infected count: \n', infected_cnt)

#Determine infected rate
print('Infected rates:')
print('Infected: ', 
      round(idf['HasDetections'].value_counts()[1]/len(idf) * 100,2), "%")
print('Not infected: ', 
      round(idf['HasDetections'].value_counts()[0]/len(idf) * 100,2), "%")

# Histogram of infected classification
sns.countplot('HasDetections', data = idf)
plt.title('Not-Infected: 0 | Infected: 1')

#Check for duplicate rows
uniq_ob_cnt = idf.MachineIdentifier.nunique()
print(uniq_ob_cnt) #10K unique MachineIdentifier values - no duplicate observations


### MISSING DATA ##############################################################
#Capture missing data %
missing = (round((idf.isnull().sum() * 100/ len(idf)),2).sort_values(ascending=False))
print(missing) 

#Remove (7) columns with high percentage of missing data (>50%)
'''
PuaMode - Pua Enabled mode from the service
Census_ProcessorClass - A classification of processors into high/medium/low. Initially used for Pricing Level SKU. No longer maintained and updated
DefaultBrowsersIdentifier - ID for the machine's default browser
Census_IsFlightingInternal - NA
Census_InternalBatteryType - NA
Census_ThresholdOptIn - NA
Census_IsWIMBootEnabled - NA
'''
idf.drop(['PuaMode', 'Census_ProcessorClass', 'DefaultBrowsersIdentifier', 
          'Census_IsFlightingInternal', 'Census_InternalBatteryType',
          'Census_ThresholdOptIn', 'Census_IsWIMBootEnabled'], axis =1, inplace=True)
###############################################################################


### UNBALANCED FEATURES #######################################################
#Capture number of unique values for each column
uniq_values_cnt = idf.nunique().sort_values()
print(uniq_values_cnt)
uniq = idf.nunique()
print(uniq)

skew_df = pd.DataFrame([{'column': c,
                       'uniq': idf[c].nunique(),
                       'skewness': idf[c].value_counts(normalize=True).values[0] * 100} for c in idf.columns])
skew_df.sort_values('skewness', ascending=False)

#Columns where responses are single value
'''
Census_IsFlightsDisabled - Indicates if the machine is participating in flighting
IsBeta - Defender state information e.g. false
'''
#Remove (3) columns with only single response value
idf.drop(['Census_IsFlightsDisabled', 'IsBeta'], axis =1, inplace=True)

'''
>99% single value:
AutoSampleOptIn - This is the SubmitSamplesConsent value passed in from the service, available on CAMP 9+
SMode - This field is set to true when the device is known to be in 'S Mode', as in, Windows 10 S mode, where only Microsoft Store apps can be installed
Census_IsPortableOperatingSystem - Indicates whether OS is booted up and running via Windows-To-Go on a USB stick
Census_DeviceFamily - AKA DeviceClass. Indicates the type of device that an edition of the OS is intended for. Example values: Windows.Desktop, Windows.Mobile, and iOS.Phone
UacLuaenable - This attribute reports whether or not the "administrator in Admin Approval Mode" user type is disabled or enabled in UAC. The value reported is obtained by reading the regkey
Census_IsVirtualDevice - Identifies a Virtual Machine (machine learning model)
ProductName - Defender state information e.g. win8defender
'''
   
#Remove (6) columns where response is >99% a single value
idf.drop(['AutoSampleOptIn', 'SMode', 'Census_IsPortableOperatingSystem', 'Census_DeviceFamily',
         'UacLuaenable', 'Census_IsVirtualDevice', 'ProductName'], axis=1, inplace=True)
###############################################################################

    
### CORRELATION ###############################################################
#Plot variable correlation
plt.figure(figsize=(32,28))
cor = idf.corr()
sns.heatmap(cor, annot = True, cmap=plt.cm.Reds)
plt.show()
    
#ID highly correlated variables (>=|0.5|)
'''
Census_OSInstallLanguageIdentifier / Census_OSUILocaleIdentifier: 0.99
OS_Build / Census_OSBuildNumber: 0.94
Census_InternalPrimaryDisplayResolutionHorizontal / Census_InternalPrimaryDisplayResolutionVertical: 0.9
IsSxsPassiveMode / RtpStateBitfield: -0.89
Census_ProcessManufacturerIdentifier / Census_ProcessModelIdentifier: 0.8
Census_PrimaryDiskTotalCapacity / Census_SystemVolumeTotalCapacity: 0.77
AVProductsInstalled / AVProductStatesIdentifier: -0.63
CountryIdentifier / GeoNameIdentifier: 0.6
Census_ProcessorCoreCount / CensusTotalPhysicalRAM: 0.6
Census_OSBuildNumber / Census_OSBuildRevision: -0.56
Census_InternalPrimaryDiagonalDisplaySizeInches / Census_InternalBatteryNumberOfcharges: 0.52
'''

#Capture correlations w/ 'HasDetections'
corr_matrix = idf.corr()
corr_matrix['HasDetections'].sort_values(ascending = False)

#Remove (11) variable least correlated w/ 'HasDetections' from highly correlated pairs
'''
Census_OSInstallLanguageIdentifier                   0.004160
Census_OSUILocaleIdentifier                          0.004131
'''
idf.drop(['Census_OSUILocaleIdentifier'], axis=1, inplace=True)

'''
Census_OSBuildNumber                                 0.031516
OsBuild                                              0.025837
'''
idf.drop(['OsBuild'], axis=1, inplace=True)

'''
Census_InternalPrimaryDisplayResolutionHorizontal    0.035337
Census_InternalPrimaryDisplayResolutionVertical      0.016160
'''
idf.drop(['Census_InternalPrimaryDisplayResolutionVertical'], axis=1, inplace=True)

'''
IsSxsPassiveMode                                    -0.030734
RtpStateBitfield                                     0.038049
'''
idf.drop(['IsSxsPassiveMode'], axis=1, inplace=True)

'''
Census_ProcessorManufacturerIdentifier               0.004561
Census_ProcessorModelIdentifier                      0.021637
'''
idf.drop(['Census_ProcessorManufacturerIdentifier'], axis=1, inplace=True)

'''
Census_SystemVolumeTotalCapacity                     0.016768
Census_PrimaryDiskTotalCapacity                      0.052893
'''
idf.drop(['Census_SystemVolumeTotalCapacity'], axis=1, inplace=True)

'''
AVProductsInstalled                                 -0.146059
AVProductStatesIdentifier                            0.116914
'''
idf.drop(['AVProductStatesIdentifier'], axis=1, inplace=True)

'''
CountryIdentifier                                    0.008077
GeoNameIdentifier                                    0.005654
'''
idf.drop(['GeoNameIdentifier'], axis=1, inplace=True)

'''
Census_ProcessorCoreCount                            0.052681
Census_TotalPhysicalRAM                              0.054507
'''
idf.drop(['Census_ProcessorCoreCount'], axis=1, inplace=True)

'''
Census_OSBuildNumber                                 0.031516
Census_OSBuildRevision                              -0.011496
'''
idf.drop(['Census_OSBuildRevision'], axis=1, inplace=True)

'''
Census_InternalPrimaryDiagonalDisplaySizeInInches    0.037031
Census_InternalBatteryNumberOfCharges                0.021450
'''
idf.drop(['Census_InternalBatteryNumberOfCharges'], axis=1, inplace=True)

#Recheck variable correlation - nothing > |0.5|
plt.figure(figsize=(32,28))
cor = idf.corr()
sns.heatmap(cor, annot = True, cmap=plt.cm.Reds)
plt.show()
###############################################################################


### ADDITIONAL CLEANUP ########################################################

idf.drop(['MachineIdentifier'], axis=1, inplace=True) #not important

# Impute missing data AND/OR transform data types 
idf['SmartScreen'] = idf['SmartScreen'].cat.add_categories('Unknown')
idf.SmartScreen.fillna('Unknown', inplace=True)

idf['OrganizationIdentifier'] = idf['OrganizationIdentifier'].astype('category')
idf['OrganizationIdentifier'] = idf['OrganizationIdentifier'].cat.add_categories('Unknown')
idf.OrganizationIdentifier.fillna('Unknown', inplace=True)

idf['CityIdentifier'] = idf['CityIdentifier'].astype('category')
idf['CityIdentifier'] = idf['CityIdentifier'].cat.add_categories('Unknown')
idf.CityIdentifier.fillna('Unknown', inplace=True)

#BINARY#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
idf['Wdft_IsGamer'] = idf['Wdft_IsGamer'].astype('category')
idf['Wdft_IsGamer'] = idf['Wdft_IsGamer'].cat.add_categories('Unknown')
idf.Wdft_IsGamer.fillna('Unknown', inplace=True)

idf['Wdft_RegionIdentifier'] = idf['Wdft_RegionIdentifier'].astype('category')
idf['Wdft_RegionIdentifier'] = idf['Wdft_RegionIdentifier'].cat.add_categories('Unknown')
idf.Wdft_RegionIdentifier.fillna('Unknown', inplace=True)

idf['Census_FirmwareManufacturerIdentifier'] = idf['Census_FirmwareManufacturerIdentifier'].astype('category')
idf['Census_FirmwareManufacturerIdentifier'] = idf['Census_FirmwareManufacturerIdentifier'].cat.add_categories('Unknown')
idf.Census_FirmwareManufacturerIdentifier.fillna('Unknown', inplace=True)

idf['Census_FirmwareVersionIdentifier'] = idf['Census_FirmwareVersionIdentifier'].astype('category')
idf['Census_FirmwareVersionIdentifier'] = idf['Census_FirmwareVersionIdentifier'].cat.add_categories('Unknown')
idf.Census_FirmwareVersionIdentifier.fillna('Unknown', inplace=True)

idf['Census_OEMModelIdentifier'] = idf['Census_OEMModelIdentifier'].astype('category')
idf['Census_OEMModelIdentifier'] = idf['Census_OEMModelIdentifier'].cat.add_categories('Unknown')
idf.Census_OEMModelIdentifier.fillna('Unknown', inplace=True)

#BINARY#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
idf['Firewall'] = idf['Firewall'].astype('category')
idf['Firewall'] = idf['Firewall'].cat.add_categories('Unknown')
idf.Firewall.fillna('Unknown', inplace=True)

idf['Census_OEMNameIdentifier'] = idf['Census_OEMNameIdentifier'].astype('category')
idf['Census_OEMNameIdentifier'] = idf['Census_OEMNameIdentifier'].cat.add_categories('Unknown')
idf.Census_OEMNameIdentifier.fillna('Unknown', inplace=True)


#Check final missing counts
idf.isnull().sum().sort_values()

###############################################################################


### TRANSFORM DATA TYPES ######################################################
idf['HasTpm'] = idf['HasTpm'].astype('bool')


#Explore summary of values 
print(idf.describe()) # summary statistics

#Capture outliers

#Account for missing values
###############################################################################


# OUTPUT CLEAN FILE ###########################################################
idf.to_csv('100K_clean.csv', index=False)